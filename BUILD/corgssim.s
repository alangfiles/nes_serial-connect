;
; File generated by cc65 v 2.19 - Git 4f87c7c
;
	.fopt		compiler,"cc65 v 2.19 - Git 4f87c7c"
	.setcpu		"6502"
	.smart		on
	.autoimport	on
	.case		on
	.debuginfo	off
	.importzp	sp, sreg, regsave, regbank
	.importzp	tmp1, tmp2, tmp3, tmp4, ptr1, ptr2, ptr3, ptr4
	.macpack	longbranch
	.forceimport	__STARTUP__
	.import		_pal_bg
	.import		_pal_spr
	.import		_pal_bright
	.import		_ppu_wait_nmi
	.import		_ppu_off
	.import		_ppu_on_all
	.import		_oam_clear
	.import		_oam_meta_spr
	.import		_pad_poll
	.import		_bank_spr
	.import		_vram_adr
	.import		_vram_put
	.import		_memcpy
	.import		_set_vram_buffer
	.import		_one_vram_buffer
	.import		_multi_vram_buffer_horz
	.import		_get_pad_new
	.import		_pal_fade_to
	.import		_set_scroll_y
	.import		_get_ppu_addr
	.import		_set_data_pointer
	.import		_set_mt_pointer
	.import		_buffer_4_mt
	.import		_flush_vram_update2
	.export		_PlayerSprDown
	.export		_PlayerSprDownTwo
	.export		_PlayerSprUp
	.export		_PlayerSprUpTwo
	.export		_PlayerSprRight
	.export		_PlayerSprRightTwo
	.export		_PlayerSprLeft
	.export		_PlayerSprLeftTwo
	.export		_Shopkeeper
	.export		_ShopkeeperTwo
	.export		_Brian
	.export		_Alan
	.export		_pad1
	.export		_pad1_new
	.export		_collision
	.export		_collision_L
	.export		_collision_R
	.export		_collision_U
	.export		_collision_D
	.export		_which_bg
	.export		_p_maps
	.export		_coordinates
	.export		_temp1
	.export		_temp2
	.export		_temp3
	.export		_temp4
	.export		_temp_x
	.export		_temp_y
	.export		_player_x
	.export		_player_y
	.export		_minutes_left
	.export		_seconds_left_tens
	.export		_seconds_left_ones
	.export		_address
	.export		_x
	.export		_y
	.export		_index
	.export		_player_height
	.export		_player_width
	.export		_i
	.export		_last_direction
	.export		_move_frames
	.export		_has_moved
	.export		_frame
	.export		_title_text
	.export		_start_text
	.export		_end_text
	.export		_end_text2
	.export		_clock_text
	.export		_items_text
	.export		_game_mode
	.export		_c_map
	.export		_c1
	.export		_c2
	.export		_c3
	.export		_c4
	.export		_c5
	.export		_All_Collision_Maps
	.export		_palette_bg
	.export		_palette_sp
	.export		_metatiles1
	.export		_draw_bg
	.export		_draw_sprites
	.export		_draw_timer
	.export		_movement
	.export		_item_detection
	.export		_bg_collision
	.export		_change_room_right
	.export		_change_room_left
	.export		_change_room_up
	.export		_change_room_down
	.export		_load_title
	.export		_load_end
	.export		_clear_title
	.export		_clear_end
	.export		_initialize_game
	.export		_Room1
	.export		_main

.segment	"DATA"

_which_bg:
	.byte	$00
_player_x:
	.byte	$40
_player_y:
	.byte	$50
_minutes_left:
	.word	$0004
_seconds_left_tens:
	.word	$0000
_seconds_left_ones:
	.word	$0000
_player_height:
	.byte	$0D
_player_width:
	.byte	$0D
_last_direction:
	.byte	$00
_move_frames:
	.byte	$00
_has_moved:
	.byte	$00
_frame:
	.byte	$00

.segment	"RODATA"

_PlayerSprDown:
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$00
	.byte	$08
	.byte	$00
	.byte	$03
	.byte	$00
	.byte	$00
	.byte	$08
	.byte	$12
	.byte	$00
	.byte	$08
	.byte	$08
	.byte	$13
	.byte	$00
	.byte	$80
_PlayerSprDownTwo:
	.byte	$00
	.byte	$00
	.byte	$04
	.byte	$00
	.byte	$08
	.byte	$00
	.byte	$05
	.byte	$00
	.byte	$00
	.byte	$08
	.byte	$14
	.byte	$00
	.byte	$08
	.byte	$08
	.byte	$15
	.byte	$00
	.byte	$80
_PlayerSprUp:
	.byte	$00
	.byte	$00
	.byte	$42
	.byte	$00
	.byte	$08
	.byte	$00
	.byte	$43
	.byte	$00
	.byte	$00
	.byte	$08
	.byte	$52
	.byte	$00
	.byte	$08
	.byte	$08
	.byte	$53
	.byte	$00
	.byte	$80
_PlayerSprUpTwo:
	.byte	$00
	.byte	$00
	.byte	$44
	.byte	$00
	.byte	$08
	.byte	$00
	.byte	$45
	.byte	$00
	.byte	$00
	.byte	$08
	.byte	$54
	.byte	$00
	.byte	$08
	.byte	$08
	.byte	$55
	.byte	$00
	.byte	$80
_PlayerSprRight:
	.byte	$00
	.byte	$00
	.byte	$24
	.byte	$00
	.byte	$08
	.byte	$00
	.byte	$23
	.byte	$00
	.byte	$00
	.byte	$08
	.byte	$34
	.byte	$00
	.byte	$08
	.byte	$08
	.byte	$33
	.byte	$00
	.byte	$80
_PlayerSprRightTwo:
	.byte	$00
	.byte	$00
	.byte	$26
	.byte	$00
	.byte	$08
	.byte	$00
	.byte	$25
	.byte	$00
	.byte	$00
	.byte	$08
	.byte	$36
	.byte	$00
	.byte	$08
	.byte	$08
	.byte	$35
	.byte	$00
	.byte	$80
_PlayerSprLeft:
	.byte	$00
	.byte	$00
	.byte	$23
	.byte	$40
	.byte	$08
	.byte	$00
	.byte	$24
	.byte	$40
	.byte	$00
	.byte	$08
	.byte	$33
	.byte	$40
	.byte	$08
	.byte	$08
	.byte	$34
	.byte	$40
	.byte	$80
_PlayerSprLeftTwo:
	.byte	$00
	.byte	$00
	.byte	$25
	.byte	$40
	.byte	$08
	.byte	$00
	.byte	$26
	.byte	$40
	.byte	$00
	.byte	$08
	.byte	$35
	.byte	$40
	.byte	$08
	.byte	$08
	.byte	$36
	.byte	$40
	.byte	$80
_Shopkeeper:
	.byte	$00
	.byte	$00
	.byte	$66
	.byte	$03
	.byte	$08
	.byte	$00
	.byte	$67
	.byte	$03
	.byte	$00
	.byte	$08
	.byte	$76
	.byte	$03
	.byte	$08
	.byte	$08
	.byte	$77
	.byte	$03
	.byte	$80
_ShopkeeperTwo:
	.byte	$00
	.byte	$00
	.byte	$62
	.byte	$01
	.byte	$08
	.byte	$00
	.byte	$63
	.byte	$01
	.byte	$00
	.byte	$08
	.byte	$72
	.byte	$01
	.byte	$08
	.byte	$08
	.byte	$73
	.byte	$01
	.byte	$80
_Brian:
	.byte	$00
	.byte	$00
	.byte	$CE
	.byte	$01
	.byte	$08
	.byte	$00
	.byte	$CF
	.byte	$01
	.byte	$00
	.byte	$08
	.byte	$DE
	.byte	$01
	.byte	$08
	.byte	$08
	.byte	$DF
	.byte	$01
	.byte	$00
	.byte	$10
	.byte	$EE
	.byte	$01
	.byte	$08
	.byte	$10
	.byte	$EF
	.byte	$01
	.byte	$00
	.byte	$18
	.byte	$FE
	.byte	$01
	.byte	$08
	.byte	$18
	.byte	$FF
	.byte	$01
	.byte	$80
_Alan:
	.byte	$00
	.byte	$00
	.byte	$CC
	.byte	$01
	.byte	$08
	.byte	$00
	.byte	$CD
	.byte	$01
	.byte	$00
	.byte	$08
	.byte	$DC
	.byte	$01
	.byte	$08
	.byte	$08
	.byte	$DD
	.byte	$01
	.byte	$00
	.byte	$10
	.byte	$EC
	.byte	$01
	.byte	$08
	.byte	$10
	.byte	$ED
	.byte	$01
	.byte	$00
	.byte	$18
	.byte	$FC
	.byte	$01
	.byte	$08
	.byte	$18
	.byte	$FD
	.byte	$01
	.byte	$80
_title_text:
	.byte	$43,$4F,$52,$47,$53,$20,$53,$69,$6D,$75,$6C,$61,$74,$6F,$72,$00
_start_text:
	.byte	$50,$72,$65,$73,$73,$20,$53,$74,$61,$72,$74,$00
_end_text:
	.byte	$59,$6F,$75,$20,$66,$6F,$75,$6E,$64,$20,$61,$20,$63,$6F,$70,$79
	.byte	$20,$6F,$66,$20,$4A,$45,$51,$42,$00
_end_text2:
	.byte	$50,$72,$65,$73,$73,$20,$53,$74,$61,$72,$74,$20,$74,$6F,$20,$70
	.byte	$6C,$61,$79,$20,$61,$67,$61,$69,$6E,$00
_clock_text:
	.byte	$54,$69,$6D,$65,$20,$4C,$65,$66,$74,$3A,$20,$00
_items_text:
	.byte	$49,$74,$65,$6D,$73,$20,$43,$6F,$6C,$6C,$65,$63,$74,$65,$64,$3A
	.byte	$20,$20,$20,$20,$30,$20,$30,$20,$2A,$00
_c1:
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$06
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$0E
	.byte	$0E
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$05
	.byte	$02
	.byte	$00
	.byte	$22
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$18
	.byte	$00
	.byte	$00
	.byte	$1A
	.byte	$00
	.byte	$00
	.byte	$1D
	.byte	$25
	.byte	$26
	.byte	$03
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$10
	.byte	$16
	.byte	$13
	.byte	$10
	.byte	$00
	.byte	$00
	.byte	$10
	.byte	$16
	.byte	$15
	.byte	$21
	.byte	$22
	.byte	$00
	.byte	$03
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$03
	.byte	$02
	.byte	$0A
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$0A
	.byte	$03
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$0A
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$0A
	.byte	$03
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$03
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$14
	.byte	$15
	.byte	$14
	.byte	$13
	.byte	$00
	.byte	$00
	.byte	$10
	.byte	$11
	.byte	$16
	.byte	$17
	.byte	$00
	.byte	$00
	.byte	$03
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$29
	.byte	$00
	.byte	$00
	.byte	$29
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$29
	.byte	$00
	.byte	$29
	.byte	$00
	.byte	$00
	.byte	$03
	.byte	$07
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$00
	.byte	$00
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$08
_c2:
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$05
	.byte	$01
	.byte	$0C
	.byte	$01
	.byte	$0C
	.byte	$0C
	.byte	$0C
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$0C
	.byte	$0C
	.byte	$01
	.byte	$0C
	.byte	$0C
	.byte	$02
	.byte	$06
	.byte	$18
	.byte	$19
	.byte	$18
	.byte	$18
	.byte	$19
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$22
	.byte	$22
	.byte	$22
	.byte	$22
	.byte	$22
	.byte	$22
	.byte	$03
	.byte	$07
	.byte	$00
	.byte	$1D
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$1D
	.byte	$00
	.byte	$1D
	.byte	$00
	.byte	$1D
	.byte	$03
	.byte	$06
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$04
	.byte	$06
	.byte	$19
	.byte	$18
	.byte	$19
	.byte	$18
	.byte	$19
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$04
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$03
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$03
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$20
	.byte	$20
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$1F
	.byte	$03
	.byte	$06
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$20
	.byte	$20
	.byte	$00
	.byte	$21
	.byte	$00
	.byte	$1F
	.byte	$04
	.byte	$06
	.byte	$00
	.byte	$14
	.byte	$0F
	.byte	$0E
	.byte	$0F
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$20
	.byte	$20
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$1F
	.byte	$03
	.byte	$07
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$20
	.byte	$20
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$1F
	.byte	$03
	.byte	$06
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$04
	.byte	$08
	.byte	$0A
	.byte	$09
	.byte	$09
	.byte	$09
	.byte	$0A
	.byte	$09
	.byte	$0A
	.byte	$09
	.byte	$09
	.byte	$09
	.byte	$09
	.byte	$0A
	.byte	$09
	.byte	$09
	.byte	$0B
_c3:
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$05
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$05
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$03
	.byte	$03
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$03
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$04
	.byte	$03
	.byte	$03
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$05
	.byte	$01
	.byte	$01
	.byte	$01
_c4:
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$05
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$05
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$03
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$05
	.byte	$05
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
_c5:
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
_All_Collision_Maps:
	.addr	_c1
	.addr	_c2
	.addr	_c3
	.addr	_c4
_palette_bg:
	.byte	$0C
	.byte	$00
	.byte	$10
	.byte	$1A
	.byte	$0C
	.byte	$16
	.byte	$3D
	.byte	$37
	.byte	$0C
	.byte	$06
	.byte	$37
	.byte	$1A
	.byte	$0C
	.byte	$15
	.byte	$3D
	.byte	$2C
_palette_sp:
	.byte	$0F
	.byte	$36
	.byte	$15
	.byte	$1F
	.byte	$0F
	.byte	$36
	.byte	$11
	.byte	$27
	.byte	$0F
	.byte	$00
	.byte	$0F
	.byte	$15
	.byte	$0F
	.byte	$36
	.byte	$1A
	.byte	$07
_metatiles1:
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$11
	.byte	$11
	.byte	$02
	.byte	$02
	.byte	$03
	.byte	$02
	.byte	$03
	.byte	$02
	.byte	$12
	.byte	$13
	.byte	$12
	.byte	$13
	.byte	$02
	.byte	$04
	.byte	$04
	.byte	$14
	.byte	$14
	.byte	$02
	.byte	$01
	.byte	$05
	.byte	$15
	.byte	$13
	.byte	$02
	.byte	$06
	.byte	$01
	.byte	$13
	.byte	$16
	.byte	$02
	.byte	$02
	.byte	$07
	.byte	$17
	.byte	$14
	.byte	$02
	.byte	$08
	.byte	$13
	.byte	$14
	.byte	$18
	.byte	$02
	.byte	$09
	.byte	$09
	.byte	$09
	.byte	$09
	.byte	$02
	.byte	$0A
	.byte	$0A
	.byte	$1A
	.byte	$1A
	.byte	$02
	.byte	$0B
	.byte	$1B
	.byte	$1B
	.byte	$0B
	.byte	$02
	.byte	$0C
	.byte	$00
	.byte	$0C
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$1C
	.byte	$00
	.byte	$00
	.byte	$8B
	.byte	$8B
	.byte	$9B
	.byte	$9B
	.byte	$01
	.byte	$80
	.byte	$82
	.byte	$90
	.byte	$92
	.byte	$00
	.byte	$87
	.byte	$88
	.byte	$90
	.byte	$92
	.byte	$00
	.byte	$99
	.byte	$9A
	.byte	$90
	.byte	$92
	.byte	$00
	.byte	$80
	.byte	$81
	.byte	$90
	.byte	$91
	.byte	$00
	.byte	$81
	.byte	$82
	.byte	$91
	.byte	$92
	.byte	$00
	.byte	$96
	.byte	$86
	.byte	$90
	.byte	$91
	.byte	$00
	.byte	$98
	.byte	$88
	.byte	$91
	.byte	$92
	.byte	$00
	.byte	$87
	.byte	$8A
	.byte	$90
	.byte	$91
	.byte	$00
	.byte	$89
	.byte	$97
	.byte	$91
	.byte	$92
	.byte	$00
	.byte	$80
	.byte	$82
	.byte	$81
	.byte	$81
	.byte	$00
	.byte	$87
	.byte	$82
	.byte	$86
	.byte	$8A
	.byte	$00
	.byte	$96
	.byte	$88
	.byte	$81
	.byte	$89
	.byte	$00
	.byte	$C0
	.byte	$C1
	.byte	$D0
	.byte	$D1
	.byte	$03
	.byte	$E0
	.byte	$E1
	.byte	$90
	.byte	$92
	.byte	$03
	.byte	$CA
	.byte	$CB
	.byte	$DA
	.byte	$DB
	.byte	$01
	.byte	$E2
	.byte	$E3
	.byte	$F2
	.byte	$F3
	.byte	$03
	.byte	$84
	.byte	$85
	.byte	$CC
	.byte	$95
	.byte	$01
	.byte	$C6
	.byte	$C7
	.byte	$D6
	.byte	$D7
	.byte	$00
	.byte	$EA
	.byte	$EB
	.byte	$90
	.byte	$92
	.byte	$00
	.byte	$A2
	.byte	$A3
	.byte	$B0
	.byte	$B3
	.byte	$00
	.byte	$8C
	.byte	$8D
	.byte	$9C
	.byte	$9D
	.byte	$03
	.byte	$8E
	.byte	$8F
	.byte	$9E
	.byte	$9F
	.byte	$01
	.byte	$A1
	.byte	$A0
	.byte	$B1
	.byte	$B0
	.byte	$03
	.byte	$B0
	.byte	$A0
	.byte	$A1
	.byte	$B3
	.byte	$01
	.byte	$AA
	.byte	$AA
	.byte	$BA
	.byte	$BA
	.byte	$01
	.byte	$AB
	.byte	$AC
	.byte	$BB
	.byte	$00
	.byte	$01
	.byte	$A6
	.byte	$A7
	.byte	$B6
	.byte	$B7
	.byte	$03
	.byte	$A8
	.byte	$A9
	.byte	$B8
	.byte	$B9
	.byte	$03
	.byte	$DC
	.byte	$DD
	.byte	$EC
	.byte	$ED
	.byte	$01
	.byte	$AE
	.byte	$AF
	.byte	$BE
	.byte	$BF
	.byte	$01
	.byte	$0D
	.byte	$0D
	.byte	$1D
	.byte	$1D
	.byte	$01
	.byte	$C8
	.byte	$00
	.byte	$D8
	.byte	$D9
	.byte	$01
	.byte	$E8
	.byte	$E9
	.byte	$F8
	.byte	$F9
	.byte	$01
	.byte	$D2
	.byte	$D3
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$E4
	.byte	$00
	.byte	$F4
	.byte	$F5
	.byte	$00
	.byte	$E6
	.byte	$E7
	.byte	$F6
	.byte	$F7
	.byte	$00
_Room1:
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$FE
	.byte	$00
	.byte	$01
	.byte	$FE
	.byte	$00
	.byte	$01
	.byte	$FE
	.byte	$00
	.byte	$01
	.byte	$CB
	.byte	$AA
	.byte	$FF
	.byte	$00
	.byte	$00
	.byte	$55
	.byte	$AA
	.byte	$00
	.byte	$01
	.byte	$09
	.byte	$55
	.byte	$AA
	.byte	$00
	.byte	$00
	.byte	$FF
	.byte	$AA
	.byte	$00
	.byte	$01
	.byte	$09
	.byte	$FF
	.byte	$FF
	.byte	$00
	.byte	$00
	.byte	$AA
	.byte	$55
	.byte	$00
	.byte	$01
	.byte	$0F
	.byte	$00
	.byte	$01
	.byte	$00

.segment	"BSS"

.segment	"ZEROPAGE"
_pad1:
	.res	1,$00
_pad1_new:
	.res	1,$00
_collision:
	.res	1,$00
_collision_L:
	.res	1,$00
_collision_R:
	.res	1,$00
_collision_U:
	.res	1,$00
_collision_D:
	.res	1,$00
_p_maps:
	.res	2,$00
_coordinates:
	.res	1,$00
_temp1:
	.res	1,$00
_temp2:
	.res	1,$00
_temp3:
	.res	1,$00
_temp4:
	.res	1,$00
_temp_x:
	.res	1,$00
_temp_y:
	.res	1,$00
_address:
	.res	2,$00
_x:
	.res	1,$00
_y:
	.res	1,$00
_index:
	.res	1,$00
_i:
	.res	1,$00
_game_mode:
	.res	1,$00
.segment	"BSS"
_c_map:
	.res	240,$00

; ---------------------------------------------------------------
; void __near__ draw_bg (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_draw_bg: near

.segment	"CODE"

;
; oam_clear();
;
	jsr     _oam_clear
;
; ppu_off(); // screen off
;
	jsr     _ppu_off
;
; switch (which_bg)
;
	lda     _which_bg
;
; }
;
	beq     L0004
	cmp     #$01
	beq     L0006
	cmp     #$02
	beq     L0008
	cmp     #$03
	beq     L000A
	cmp     #$04
	beq     L000C
	jmp     L000E
;
; set_data_pointer(c1);
;
L0004:	lda     #<(_c1)
	ldx     #>(_c1)
	jsr     _set_data_pointer
;
; memcpy(c_map, c1, 240);
;
	ldy     #$00
L0005:	lda     _c1,y
	sta     _c_map,y
	iny
	cpy     #$F0
	bne     L0005
;
; break;
;
	jmp     L001D
;
; set_data_pointer(c2);
;
L0006:	lda     #<(_c2)
	ldx     #>(_c2)
	jsr     _set_data_pointer
;
; memcpy(c_map, c2, 240);
;
	ldy     #$00
L0007:	lda     _c2,y
	sta     _c_map,y
	iny
	cpy     #$F0
	bne     L0007
;
; break;
;
	jmp     L001D
;
; set_data_pointer(c3);
;
L0008:	lda     #<(_c3)
	ldx     #>(_c3)
	jsr     _set_data_pointer
;
; memcpy(c_map, c3, 240);
;
	ldy     #$00
L0009:	lda     _c3,y
	sta     _c_map,y
	iny
	cpy     #$F0
	bne     L0009
;
; break;
;
	jmp     L001D
;
; set_data_pointer(c4);
;
L000A:	lda     #<(_c4)
	ldx     #>(_c4)
	jsr     _set_data_pointer
;
; memcpy(c_map, c4, 240);
;
	ldy     #$00
L000B:	lda     _c4,y
	sta     _c_map,y
	iny
	cpy     #$F0
	bne     L000B
;
; break;
;
	jmp     L001D
;
; set_data_pointer(c5);
;
L000C:	lda     #<(_c5)
	ldx     #>(_c5)
	jsr     _set_data_pointer
;
; memcpy(c_map, c5, 240);
;
	ldy     #$00
L000D:	lda     _c5,y
	sta     _c_map,y
	iny
	cpy     #$F0
	bne     L000D
;
; break;
;
	jmp     L001D
;
; set_data_pointer(c5);
;
L000E:	lda     #<(_c5)
	ldx     #>(_c5)
	jsr     _set_data_pointer
;
; memcpy(c_map, c5, 240);
;
	ldy     #$00
L000F:	lda     _c5,y
	sta     _c_map,y
	iny
	cpy     #$F0
	bne     L000F
;
; set_mt_pointer(metatiles1);
;
L001D:	lda     #<(_metatiles1)
	ldx     #>(_metatiles1)
	jsr     _set_mt_pointer
;
; for (y = 0;; y += 0x20)
;
	lda     #$00
L001F:	sta     _y
;
; for (x = 0;; x += 0x20)
;
	lda     #$00
L001E:	sta     _x
;
; address = get_ppu_addr(0, x, y);
;
	jsr     decsp2
	lda     #$00
	ldy     #$01
	sta     (sp),y
	lda     _x
	dey
	sta     (sp),y
	lda     _y
	jsr     _get_ppu_addr
	sta     _address
	stx     _address+1
;
; index = (y & 0xf0) + (x >> 4);
;
	lda     _y
	and     #$F0
	sta     ptr1
	lda     _x
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	clc
	adc     ptr1
	sta     _index
;
; buffer_4_mt(address, index); // ppu_address, index to the data
;
	lda     _address
	ldx     _address+1
	jsr     pushax
	lda     _index
	jsr     _buffer_4_mt
;
; flush_vram_update2();
;
	jsr     _flush_vram_update2
;
; if (x == 0xe0)
;
	lda     _x
	cmp     #$E0
;
; break;
;
	beq     L0021
;
; for (x = 0;; x += 0x20)
;
	lda     #$20
	clc
	adc     _x
	jmp     L001E
;
; if (y == 0xe0)
;
L0021:	lda     _y
	cmp     #$E0
;
; break;
;
	beq     L0022
;
; for (y = 0;; y += 0x20)
;
	lda     #$20
	clc
	adc     _y
	jmp     L001F
;
; if (which_bg == 1)
;
L0022:	lda     _which_bg
	cmp     #$01
	bne     L001A
;
; vram_adr(NTADR_A(8, 24)); // screen is 32 x 30 tiles
;
	ldx     #$23
	lda     #$08
	jsr     _vram_adr
;
; vram_put('.');
;
	lda     #$2E
;
; else
;
	jmp     L0020
;
; vram_adr(NTADR_A(8, 24)); // screen is 32 x 30 tiles
;
L001A:	ldx     #$23
	lda     #$08
	jsr     _vram_adr
;
; vram_put(' ');
;
	lda     #$20
L0020:	jsr     _vram_put
;
; draw_timer();
;
	jsr     _draw_timer
;
; ppu_on_all(); // turn on screen
;
	jmp     _ppu_on_all

.endproc

; ---------------------------------------------------------------
; void __near__ draw_sprites (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_draw_sprites: near

.segment	"CODE"

;
; ++move_frames;
;
	inc     _move_frames
;
; if (move_frames > 16)
;
	lda     _move_frames
	cmp     #$11
	bcc     L0002
;
; move_frames = 0;
;
	lda     #$00
	sta     _move_frames
;
; oam_clear();
;
L0002:	jsr     _oam_clear
;
; switch (last_direction)
;
	lda     _last_direction
;
; }
;
	beq     L0021
	cmp     #$01
	beq     L0022
	cmp     #$02
	jeq     L0023
	cmp     #$03
	jeq     L0024
	jmp     L0019
;
; if (pad1 & PAD_DOWN) //only animate if the button is pressed
;
L0021:	lda     _pad1
	and     #$04
	beq     L0006
;
; if (move_frames > 8)
;
	lda     _move_frames
	cmp     #$09
	bcc     L0007
;
; oam_meta_spr(player_x, player_y, PlayerSprDownTwo);
;
	jsr     decsp2
	lda     _player_x
	ldy     #$01
	sta     (sp),y
	lda     _player_y
	dey
	sta     (sp),y
	lda     #<(_PlayerSprDownTwo)
	ldx     #>(_PlayerSprDownTwo)
;
; else
;
	jmp     L001D
;
; oam_meta_spr(player_x, player_y, PlayerSprDown);
;
L0007:	jsr     decsp2
	lda     _player_x
	ldy     #$01
	sta     (sp),y
	lda     _player_y
	dey
	sta     (sp),y
	lda     #<(_PlayerSprDown)
	ldx     #>(_PlayerSprDown)
;
; else //this is the idle non-moving sprite
;
	jmp     L001D
;
; oam_meta_spr(player_x, player_y, PlayerSprDown);
;
L0006:	jsr     decsp2
	lda     _player_x
	ldy     #$01
	sta     (sp),y
	lda     _player_y
	dey
	sta     (sp),y
	lda     #<(_PlayerSprDown)
	ldx     #>(_PlayerSprDown)
;
; break;
;
	jmp     L001D
;
; if (pad1 & PAD_LEFT) //only animate if the button is pressed
;
L0022:	lda     _pad1
	and     #$02
	beq     L000B
;
; if (move_frames > 8)
;
	lda     _move_frames
	cmp     #$09
	bcc     L000C
;
; oam_meta_spr(player_x, player_y, PlayerSprLeftTwo);
;
	jsr     decsp2
	lda     _player_x
	ldy     #$01
	sta     (sp),y
	lda     _player_y
	dey
	sta     (sp),y
	lda     #<(_PlayerSprLeftTwo)
	ldx     #>(_PlayerSprLeftTwo)
;
; else
;
	jmp     L001D
;
; oam_meta_spr(player_x, player_y, PlayerSprLeft);
;
L000C:	jsr     decsp2
	lda     _player_x
	ldy     #$01
	sta     (sp),y
	lda     _player_y
	dey
	sta     (sp),y
	lda     #<(_PlayerSprLeft)
	ldx     #>(_PlayerSprLeft)
;
; else //this is the idle non-moving sprite
;
	jmp     L001D
;
; oam_meta_spr(player_x, player_y, PlayerSprLeft);
;
L000B:	jsr     decsp2
	lda     _player_x
	ldy     #$01
	sta     (sp),y
	lda     _player_y
	dey
	sta     (sp),y
	lda     #<(_PlayerSprLeft)
	ldx     #>(_PlayerSprLeft)
;
; break;
;
	jmp     L001D
;
; if (pad1 & PAD_UP) //only animate if the button is pressed
;
L0023:	lda     _pad1
	and     #$08
	beq     L0019
;
; if (move_frames > 8)
;
	lda     _move_frames
	cmp     #$09
	bcc     L0019
;
; oam_meta_spr(player_x, player_y, PlayerSprUpTwo);
;
	jsr     decsp2
	lda     _player_x
	ldy     #$01
	sta     (sp),y
	lda     _player_y
	dey
	sta     (sp),y
	lda     #<(_PlayerSprUpTwo)
	ldx     #>(_PlayerSprUpTwo)
;
; else
;
	jmp     L001D
;
; if (pad1 & PAD_RIGHT) //only animate if the button is pressed
;
L0024:	lda     _pad1
	and     #$01
	beq     L0015
;
; if (move_frames > 8)
;
	lda     _move_frames
	cmp     #$09
	bcc     L0016
;
; oam_meta_spr(player_x, player_y, PlayerSprRightTwo);
;
	jsr     decsp2
	lda     _player_x
	ldy     #$01
	sta     (sp),y
	lda     _player_y
	dey
	sta     (sp),y
	lda     #<(_PlayerSprRightTwo)
	ldx     #>(_PlayerSprRightTwo)
;
; else
;
	jmp     L001D
;
; oam_meta_spr(player_x, player_y, PlayerSprRight);
;
L0016:	jsr     decsp2
	lda     _player_x
	ldy     #$01
	sta     (sp),y
	lda     _player_y
	dey
	sta     (sp),y
	lda     #<(_PlayerSprRight)
	ldx     #>(_PlayerSprRight)
;
; else //this is the idle non-moving sprite
;
	jmp     L001D
;
; oam_meta_spr(player_x, player_y, PlayerSprRight);
;
L0015:	jsr     decsp2
	lda     _player_x
	ldy     #$01
	sta     (sp),y
	lda     _player_y
	dey
	sta     (sp),y
	lda     #<(_PlayerSprRight)
	ldx     #>(_PlayerSprRight)
;
; break;
;
	jmp     L001D
;
; oam_meta_spr(player_x, player_y, PlayerSprUp);
;
L0019:	jsr     decsp2
	lda     _player_x
	ldy     #$01
	sta     (sp),y
	lda     _player_y
	dey
	sta     (sp),y
	lda     #<(_PlayerSprUp)
	ldx     #>(_PlayerSprUp)
L001D:	jsr     _oam_meta_spr
;
; if(which_bg == 0) {
;
	lda     _which_bg
	bne     L0025
;
; oam_meta_spr(100, 70, Shopkeeper);
;
	jsr     decsp2
	lda     #$64
	ldy     #$01
	sta     (sp),y
	lda     #$46
	dey
	sta     (sp),y
	lda     #<(_Shopkeeper)
	ldx     #>(_Shopkeeper)
	jsr     _oam_meta_spr
;
; if(which_bg == 1) {
;
L0025:	lda     _which_bg
	cmp     #$01
	bne     L001B
;
; oam_meta_spr(40, 70, ShopkeeperTwo);
;
	jsr     decsp2
	lda     #$28
	ldy     #$01
	sta     (sp),y
	lda     #$46
	dey
	sta     (sp),y
	lda     #<(_ShopkeeperTwo)
	ldx     #>(_ShopkeeperTwo)
	jsr     _oam_meta_spr
;
; oam_meta_spr(180, 160, Brian);
;
	jsr     decsp2
	lda     #$B4
	ldy     #$01
	sta     (sp),y
	lda     #$A0
	dey
	sta     (sp),y
	lda     #<(_Brian)
	ldx     #>(_Brian)
	jsr     _oam_meta_spr
;
; oam_meta_spr(200, 160, Alan);
;
	jsr     decsp2
	lda     #$C8
	ldy     #$01
	sta     (sp),y
	lda     #$A0
	dey
	sta     (sp),y
	lda     #<(_Alan)
	ldx     #>(_Alan)
	jmp     _oam_meta_spr
;
; }
;
L001B:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ draw_timer (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_draw_timer: near

.segment	"CODE"

;
; multi_vram_buffer_horz(items_text, sizeof(items_text), NTADR_A(2, 1));
;
	jsr     decsp3
	lda     #<(_items_text)
	ldy     #$01
	sta     (sp),y
	iny
	lda     #>(_items_text)
	sta     (sp),y
	lda     #$1A
	ldy     #$00
	sta     (sp),y
	ldx     #$20
	lda     #$22
	jsr     _multi_vram_buffer_horz
;
; multi_vram_buffer_horz(clock_text, sizeof(clock_text), NTADR_A(2, 2));
;
	jsr     decsp3
	lda     #<(_clock_text)
	ldy     #$01
	sta     (sp),y
	iny
	lda     #>(_clock_text)
	sta     (sp),y
	lda     #$0C
	ldy     #$00
	sta     (sp),y
	ldx     #$20
	lda     #$42
	jsr     _multi_vram_buffer_horz
;
; one_vram_buffer(48 + minutes_left, NTADR_A(23, 2));
;
	lda     _minutes_left
	clc
	adc     #$30
	jsr     pusha
	ldx     #$20
	lda     #$57
	jsr     _one_vram_buffer
;
; one_vram_buffer(':', NTADR_A(24, 2));
;
	lda     #$3A
	jsr     pusha
	ldx     #$20
	lda     #$58
	jsr     _one_vram_buffer
;
; one_vram_buffer(48 + seconds_left_tens, NTADR_A(25, 2));
;
	lda     _seconds_left_tens
	clc
	adc     #$30
	jsr     pusha
	ldx     #$20
	lda     #$59
	jsr     _one_vram_buffer
;
; one_vram_buffer(48 + seconds_left_ones, NTADR_A(26, 2));
;
	lda     _seconds_left_ones
	clc
	adc     #$30
	jsr     pusha
	ldx     #$20
	lda     #$5A
	jmp     _one_vram_buffer

.endproc

; ---------------------------------------------------------------
; void __near__ movement (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_movement: near

.segment	"CODE"

;
; has_moved = 0;
;
	lda     #$00
	sta     _has_moved
;
; if (pad1 & PAD_LEFT)
;
	lda     _pad1
	and     #$02
	beq     L0016
;
; last_direction = LEFT_MOVE;
;
	lda     #$01
	sta     _last_direction
;
; player_x -= 1;
;
	dec     _player_x
;
; has_moved = 1;
;
	sta     _has_moved
;
; if (player_x == SCREEN_LEFT_EDGE)
;
	ldx     #$00
	lda     _player_x
	bne     L0006
;
; change_room_left();
;
	jsr     _change_room_left
;
; else if (pad1 & PAD_RIGHT)
;
	jmp     L0006
L0016:	lda     _pad1
	ldx     #$00
	and     #$01
	beq     L0006
;
; last_direction = RIGHT_MOVE;
;
	lda     #$03
	sta     _last_direction
;
; player_x += 1;
;
	inc     _player_x
;
; has_moved = 1;
;
	lda     #$01
	sta     _has_moved
;
; if (player_x == SCREEN_RIGHT_EDGE)
;
	lda     _player_x
	cmp     #$F0
	bne     L0006
;
; change_room_right();
;
	jsr     _change_room_right
;
; bg_collision();
;
L0006:	jsr     _bg_collision
;
; if (collision_R)
;
	lda     _collision_R
	beq     L0007
;
; player_x -= 1;
;
	dec     _player_x
;
; if (collision_L)
;
L0007:	lda     _collision_L
	beq     L0008
;
; player_x += 1;
;
	inc     _player_x
;
; if (pad1 & PAD_UP && !has_moved)
;
L0008:	lda     _pad1
	and     #$08
	beq     L001A
	lda     _has_moved
	bne     L001A
;
; last_direction = UP_MOVE;
;
	lda     #$02
	sta     _last_direction
;
; player_y -= 1;
;
	dec     _player_y
;
; if (player_y == SCREEN_TOP_EDGE)
;
	ldx     #$00
	lda     _player_y
	cmp     #$20
	bne     L0013
;
; change_room_up();
;
	jsr     _change_room_up
;
; else if (pad1 & PAD_DOWN && !has_moved)
;
	jmp     L0013
L001A:	lda     _pad1
	ldx     #$00
	and     #$04
	beq     L0013
	lda     _has_moved
	beq     L001D
	txa
	jmp     L0013
;
; last_direction = DOWN_MOVE;
;
L001D:	sta     _last_direction
;
; player_y += 1;
;
	inc     _player_y
;
; if (player_y == SCREEN_BOTTOM_EDGE)
;
	lda     _player_y
	cmp     #$E0
	bne     L0013
;
; change_room_down();
;
	jsr     _change_room_down
;
; bg_collision();
;
L0013:	jsr     _bg_collision
;
; if (collision_D)
;
	lda     _collision_D
	beq     L0014
;
; player_y -= 1;
;
	dec     _player_y
;
; if (collision_U)
;
L0014:	lda     _collision_U
	beq     L0015
;
; player_y += 1;
;
	inc     _player_y
;
; }
;
L0015:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ item_detection (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_item_detection: near

.segment	"CODE"

;
; if (which_bg == 1 && player_y < 0xb8 + 0x08 && player_y >= 0xb8 - 0x08 && player_x < 0x3a + 0x08 && player_x >= 0x3a - 0x08 && ((pad1 & PAD_A) || (pad1 & PAD_B)))
;
	lda     _which_bg
	cmp     #$01
	bne     L000A
	lda     _player_y
	cmp     #$C0
	bcs     L000A
	cmp     #$B0
	bcc     L000A
	lda     _player_x
	cmp     #$42
	bcs     L000A
	cmp     #$32
	bcc     L000A
	lda     _pad1
	and     #$80
	bne     L000C
	lda     _pad1
	and     #$40
	bne     L000C
	rts
L000A:	rts
;
; load_end();
;
L000C:	jsr     _load_end
;
; game_mode = MODE_END;
;
	lda     #$04
	sta     _game_mode
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ bg_collision (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_bg_collision: near

.segment	"CODE"

;
; collision_L = 0;
;
	lda     #$00
	sta     _collision_L
;
; collision_R = 0;
;
	sta     _collision_R
;
; collision_U = 0;
;
	sta     _collision_U
;
; collision_D = 0;
;
	sta     _collision_D
;
; temp1 = player_x;        // left side
;
	lda     _player_x
	sta     _temp1
;
; temp2 = temp1 + player_width;  // right side
;
	clc
	adc     _player_width
	sta     _temp2
;
; temp3 = player_y;        // top side
;
	lda     _player_y
	sta     _temp3
;
; temp4 = temp3 + player_height; // bottom side
;
	clc
	adc     _player_height
	sta     _temp4
;
; if (temp3 >= 0xf0)
;
	lda     _temp3
	cmp     #$F0
;
; return;
;
	bcc     L0031
;
; }
;
	rts
;
; coordinates = (temp1 >> 4) + (temp3 & 0xf0); // upper left
;
L0031:	lda     _temp1
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	sta     ptr1
	lda     _temp3
	and     #$F0
	clc
	adc     ptr1
	sta     _coordinates
;
; if (c_map[coordinates] && c_map[coordinates] != 5)
;
	ldy     _coordinates
	lda     _c_map,y
	beq     L0025
	ldy     _coordinates
	lda     _c_map,y
	cmp     #$05
	beq     L0025
;
; ++collision_L;
;
	inc     _collision_L
;
; ++collision_U;
;
	inc     _collision_U
;
; coordinates = (temp2 >> 4) + (temp3 & 0xf0); // upper right
;
L0025:	lda     _temp2
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	sta     ptr1
	lda     _temp3
	and     #$F0
	clc
	adc     ptr1
	sta     _coordinates
;
; if (c_map[coordinates] && c_map[coordinates] != 5)
;
	ldy     _coordinates
	lda     _c_map,y
	beq     L0029
	ldy     _coordinates
	lda     _c_map,y
	cmp     #$05
	beq     L0029
;
; ++collision_R;
;
	inc     _collision_R
;
; ++collision_U;
;
	inc     _collision_U
;
; if (temp4 >= 0xf0)
;
L0029:	lda     _temp4
	cmp     #$F0
;
; return;
;
	bcs     L0016
;
; coordinates = (temp1 >> 4) + (temp4 & 0xf0); // bottom left
;
	lda     _temp1
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	sta     ptr1
	lda     _temp4
	and     #$F0
	clc
	adc     ptr1
	sta     _coordinates
;
; if (c_map[coordinates] && c_map[coordinates] != 5)
;
	ldy     _coordinates
	lda     _c_map,y
	beq     L002D
	ldy     _coordinates
	lda     _c_map,y
	cmp     #$05
	beq     L002D
;
; ++collision_L;
;
	inc     _collision_L
;
; ++collision_D;
;
	inc     _collision_D
;
; coordinates = (temp2 >> 4) + (temp4 & 0xf0); // bottom right
;
L002D:	lda     _temp2
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	sta     ptr1
	lda     _temp4
	and     #$F0
	clc
	adc     ptr1
	sta     _coordinates
;
; if (c_map[coordinates] && c_map[coordinates] != 5)
;
	ldy     _coordinates
	lda     _c_map,y
	beq     L002F
	ldy     _coordinates
	lda     _c_map,y
	cmp     #$05
	bne     L0030
L002F:	rts
;
; ++collision_R;
;
L0030:	inc     _collision_R
;
; ++collision_D;
;
	inc     _collision_D
;
; }
;
L0016:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ change_room_right (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_change_room_right: near

.segment	"CODE"

;
; player_x = PLAYER_LEFT_EDGE;
;
	lda     #$01
	sta     _player_x
;
; if (which_bg == 3)
;
	lda     _which_bg
	cmp     #$03
	bne     L0004
;
; which_bg = 2;
;
	lda     #$02
	sta     _which_bg
;
; if (which_bg == 0)
;
L0004:	lda     _which_bg
	bne     L0003
;
; which_bg = 1;
;
	lda     #$01
	sta     _which_bg
;
; draw_bg();
;
L0003:	jmp     _draw_bg

.endproc

; ---------------------------------------------------------------
; void __near__ change_room_left (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_change_room_left: near

.segment	"CODE"

;
; player_x = PLAYER_RIGHT_EDGE;
;
	lda     #$EF
	sta     _player_x
;
; if (which_bg == 2)
;
	lda     _which_bg
	cmp     #$02
	bne     L0004
;
; which_bg = 3;
;
	lda     #$03
	sta     _which_bg
;
; if (which_bg == 1)
;
L0004:	lda     _which_bg
	cmp     #$01
	bne     L0003
;
; which_bg = 0;
;
	lda     #$00
	sta     _which_bg
;
; draw_bg();
;
L0003:	jmp     _draw_bg

.endproc

; ---------------------------------------------------------------
; void __near__ change_room_up (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_change_room_up: near

.segment	"CODE"

;
; player_y = PLAYER_BOTTOM_EDGE;
;
	lda     #$DF
	sta     _player_y
;
; if (which_bg == 0)
;
	lda     _which_bg
	bne     L0004
;
; which_bg = 3;
;
	lda     #$03
	sta     _which_bg
;
; if (which_bg == 1)
;
L0004:	lda     _which_bg
	cmp     #$01
	bne     L0003
;
; which_bg = 2;
;
	lda     #$02
	sta     _which_bg
;
; draw_bg();
;
L0003:	jmp     _draw_bg

.endproc

; ---------------------------------------------------------------
; void __near__ change_room_down (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_change_room_down: near

.segment	"CODE"

;
; player_y = PLAYER_TOP_EDGE;
;
	lda     #$22
	sta     _player_y
;
; if (which_bg == 3)
;
	lda     _which_bg
	cmp     #$03
	bne     L0004
;
; which_bg = 0;
;
	lda     #$00
	sta     _which_bg
;
; if (which_bg == 2)
;
L0004:	lda     _which_bg
	cmp     #$02
	bne     L0003
;
; which_bg = 1;
;
	lda     #$01
	sta     _which_bg
;
; draw_bg();
;
L0003:	jmp     _draw_bg

.endproc

; ---------------------------------------------------------------
; void __near__ load_title (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_load_title: near

.segment	"CODE"

;
; oam_clear();
;
	jsr     _oam_clear
;
; ppu_off();
;
	jsr     _ppu_off
;
; vram_adr(NTADR_A(8, 14)); // screen is 32 x 30 tiles
;
	ldx     #$21
	lda     #$C8
	jsr     _vram_adr
;
; i = 0;
;
	lda     #$00
	sta     _i
;
; while (title_text[i])
;
	jmp     L0004
;
; vram_put(title_text[i]); // this pushes 1 char to the screen
;
L0002:	ldy     _i
	lda     _title_text,y
	jsr     _vram_put
;
; ++i;
;
	inc     _i
;
; while (title_text[i])
;
L0004:	ldy     _i
	lda     _title_text,y
	bne     L0002
;
; i = 0;
;
	sta     _i
;
; vram_adr(NTADR_A(10, 20)); // screen is 32 x 30 tiles
;
	ldx     #$22
	lda     #$8A
	jsr     _vram_adr
;
; i = 0;
;
	lda     #$00
	sta     _i
;
; while (start_text[i])
;
	jmp     L0009
;
; vram_put(start_text[i]); // this pushes 1 char to the screen
;
L0007:	ldy     _i
	lda     _start_text,y
	jsr     _vram_put
;
; ++i;
;
	inc     _i
;
; while (start_text[i])
;
L0009:	ldy     _i
	lda     _start_text,y
	bne     L0007
;
; ppu_on_all();
;
	jmp     _ppu_on_all

.endproc

; ---------------------------------------------------------------
; void __near__ load_end (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_load_end: near

.segment	"CODE"

;
; player_x = -4;
;
	lda     #$FC
	sta     _player_x
;
; player_y = -4;
;
	sta     _player_y
;
; which_bg = 5; //set background to black
;
	lda     #$05
	sta     _which_bg
;
; draw_bg();
;
	jsr     _draw_bg
;
; oam_clear();
;
	jsr     _oam_clear
;
; ppu_off();
;
	jsr     _ppu_off
;
; vram_adr(NTADR_A(4, 14)); // screen is 32 x 30 tiles
;
	ldx     #$21
	lda     #$C4
	jsr     _vram_adr
;
; i = 0;
;
	lda     #$00
	sta     _i
;
; while (end_text[i])
;
	jmp     L0004
;
; vram_put(end_text[i]); // this pushes 1 char to the screen
;
L0002:	ldy     _i
	lda     _end_text,y
	jsr     _vram_put
;
; ++i;
;
	inc     _i
;
; while (end_text[i])
;
L0004:	ldy     _i
	lda     _end_text,y
	bne     L0002
;
; i = 0;
;
	sta     _i
;
; vram_adr(NTADR_A(3, 20)); // screen is 32 x 30 tiles
;
	ldx     #$22
	lda     #$83
	jsr     _vram_adr
;
; i = 0;
;
	lda     #$00
	sta     _i
;
; while (end_text2[i])
;
	jmp     L0009
;
; vram_put(end_text2[i]); // this pushes 1 char to the screen
;
L0007:	ldy     _i
	lda     _end_text2,y
	jsr     _vram_put
;
; ++i;
;
	inc     _i
;
; while (end_text2[i])
;
L0009:	ldy     _i
	lda     _end_text2,y
	bne     L0007
;
; ppu_on_all();
;
	jmp     _ppu_on_all

.endproc

; ---------------------------------------------------------------
; void __near__ clear_title (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_clear_title: near

.segment	"CODE"

;
; vram_adr(NTADR_A(8, 14)); // screen is 32 x 30 tiles
;
	ldx     #$21
	lda     #$C8
	jsr     _vram_adr
;
; i = 0;
;
	lda     #$00
	sta     _i
;
; while (title_text[i])
;
	jmp     L0004
;
; vram_put(' '); // this pushes 1 char to the screen
;
L000A:	lda     #$20
	jsr     _vram_put
;
; ++i;
;
	inc     _i
;
; while (title_text[i])
;
L0004:	ldy     _i
	lda     _title_text,y
	bne     L000A
;
; i = 0;
;
	sta     _i
;
; vram_adr(NTADR_A(10, 20)); // screen is 32 x 30 tiles
;
	ldx     #$22
	lda     #$8A
	jsr     _vram_adr
;
; i = 0;
;
	lda     #$00
	sta     _i
;
; while (start_text[i])
;
	jmp     L0008
;
; vram_put(' '); // this pushes 1 char to the screen
;
L000B:	lda     #$20
	jsr     _vram_put
;
; ++i;
;
	inc     _i
;
; while (start_text[i])
;
L0008:	ldy     _i
	lda     _start_text,y
	bne     L000B
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ clear_end (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_clear_end: near

.segment	"CODE"

;
; vram_adr(NTADR_A(8, 14)); // screen is 32 x 30 tiles
;
	ldx     #$21
	lda     #$C8
	jsr     _vram_adr
;
; i = 0;
;
	lda     #$00
	sta     _i
;
; while (end_text[i])
;
	jmp     L0004
;
; vram_put(' '); // this pushes 1 char to the screen
;
L000A:	lda     #$20
	jsr     _vram_put
;
; ++i;
;
	inc     _i
;
; while (end_text[i])
;
L0004:	ldy     _i
	lda     _end_text,y
	bne     L000A
;
; i = 0;
;
	sta     _i
;
; vram_adr(NTADR_A(10, 20)); // screen is 32 x 30 tiles
;
	ldx     #$22
	lda     #$8A
	jsr     _vram_adr
;
; i = 0;
;
	lda     #$00
	sta     _i
;
; while (end_text2[i])
;
	jmp     L0008
;
; vram_put(' '); // this pushes 1 char to the screen
;
L000B:	lda     #$20
	jsr     _vram_put
;
; ++i;
;
	inc     _i
;
; while (end_text2[i])
;
L0008:	ldy     _i
	lda     _end_text2,y
	bne     L000B
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ initialize_game (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_initialize_game: near

.segment	"CODE"

;
; player_x = 64;
;
	lda     #$40
	sta     _player_x
;
; player_y = 80;
;
	lda     #$50
	sta     _player_y
;
; minutes_left = 4;
;
	ldx     #$00
	lda     #$04
	sta     _minutes_left
	stx     _minutes_left+1
;
; seconds_left_tens = 0;
;
	txa
	sta     _seconds_left_tens
	sta     _seconds_left_tens+1
;
; seconds_left_ones = 0;
;
	sta     _seconds_left_ones
	sta     _seconds_left_ones+1
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ main (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_main: near

.segment	"CODE"

;
; ppu_off(); // screen off
;
	jsr     _ppu_off
;
; pal_bg(palette_bg);
;
	lda     #<(_palette_bg)
	ldx     #>(_palette_bg)
	jsr     _pal_bg
;
; pal_spr(palette_sp);
;
	lda     #<(_palette_sp)
	ldx     #>(_palette_sp)
	jsr     _pal_spr
;
; set_vram_buffer(); // do at least once, sets a pointer to a buffer
;
	jsr     _set_vram_buffer
;
; bank_spr(1);
;
	lda     #$01
	jsr     _bank_spr
;
; set_scroll_y(0xff); //shift the bg down 1 pixel
;
	ldx     #$00
	lda     #$FF
	jsr     _set_scroll_y
;
; game_mode = MODE_TITLE;
;
	lda     #$00
	sta     _game_mode
;
; load_title(); // initial title load
;
	jsr     _load_title
;
; ppu_on_all(); // turn on screen
;
	jsr     _ppu_on_all
;
; while (game_mode == MODE_TITLE)
;
	jmp     L001A
;
; ppu_wait_nmi();
;
L0005:	jsr     _ppu_wait_nmi
;
; pad1 = pad_poll(0); // read the first controller
;
	lda     #$00
	jsr     _pad_poll
	sta     _pad1
;
; pad1_new = get_pad_new(0);
;
	lda     #$00
	jsr     _get_pad_new
	sta     _pad1_new
;
; if (pad1_new & PAD_START)
;
	and     #$10
	beq     L001A
;
; pal_fade_to(4, 0); // fade to black
;
	lda     #$04
	jsr     pusha
	lda     #$00
	jsr     _pal_fade_to
;
; clear_title();
;
	jsr     _clear_title
;
; draw_bg();
;
	jsr     _draw_bg
;
; game_mode = MODE_GAME;
;
	lda     #$01
	sta     _game_mode
;
; initialize_game();
;
	jsr     _initialize_game
;
; pal_bright(4); // back to normal brighness
;
	lda     #$04
	jsr     _pal_bright
;
; while (game_mode == MODE_TITLE)
;
L001A:	lda     _game_mode
	beq     L0005
;
; while (game_mode == MODE_GAME) //gameloop
;
	jmp     L001C
;
; ++frame;
;
L001B:	inc     _frame
;
; ppu_wait_nmi(); // wait till beginning of the frame
;
	jsr     _ppu_wait_nmi
;
; pad1 = pad_poll(0);     // read the first controller
;
	lda     #$00
	jsr     _pad_poll
	sta     _pad1
;
; pad1_new = get_pad_new(0); // newly pressed button. do pad_poll first
;
	lda     #$00
	jsr     _get_pad_new
	sta     _pad1_new
;
; movement();
;
	jsr     _movement
;
; item_detection();
;
	jsr     _item_detection
;
; draw_sprites();
;
	jsr     _draw_sprites
;
; if (frame == 60)
;
	lda     _frame
	cmp     #$3C
	bne     L001C
;
; draw_timer();
;
	jsr     _draw_timer
;
; frame = 0;
;
	lda     #$00
	sta     _frame
;
; if (seconds_left_ones == 0)
;
	lda     _seconds_left_ones
	ora     _seconds_left_ones+1
	bne     L000D
;
; seconds_left_ones = 9;
;
	tax
	lda     #$09
	sta     _seconds_left_ones
	stx     _seconds_left_ones+1
;
; if (seconds_left_tens == 0)
;
	lda     _seconds_left_tens
	ora     _seconds_left_tens+1
	bne     L000F
;
; seconds_left_tens = 5;
;
	lda     #$05
	sta     _seconds_left_tens
	stx     _seconds_left_tens+1
;
; minutes_left -= 1;
;
	lda     _minutes_left
	sec
	sbc     #$01
	sta     _minutes_left
	bcs     L001C
	dec     _minutes_left+1
;
; else
;
	jmp     L001C
;
; seconds_left_tens -= 1;
;
L000F:	lda     _seconds_left_tens
	sec
	sbc     #$01
	sta     _seconds_left_tens
	bcs     L001C
	dec     _seconds_left_tens+1
;
; else
;
	jmp     L001C
;
; seconds_left_ones -= 1;
;
L000D:	lda     _seconds_left_ones
	sec
	sbc     #$01
	sta     _seconds_left_ones
	bcs     L001C
	dec     _seconds_left_ones+1
;
; while (game_mode == MODE_GAME) //gameloop
;
L001C:	lda     _game_mode
	cmp     #$01
	jeq     L001B
;
; while (game_mode == MODE_END)
;
	jmp     L001D
;
; ppu_wait_nmi();   // wait till beginning of the frame
;
L0016:	jsr     _ppu_wait_nmi
;
; pad1 = pad_poll(0); // read the first controller
;
	lda     #$00
	jsr     _pad_poll
	sta     _pad1
;
; pad1_new = get_pad_new(0);
;
	lda     #$00
	jsr     _get_pad_new
	sta     _pad1_new
;
; if (pad1_new & PAD_START)
;
	and     #$10
	beq     L001D
;
; pal_fade_to(4, 0); // fade to black
;
	lda     #$04
	jsr     pusha
	lda     #$00
	jsr     _pal_fade_to
;
; clear_end();
;
	jsr     _clear_end
;
; draw_bg(); 
;
	jsr     _draw_bg
;
; game_mode = MODE_TITLE;
;
	lda     #$00
	sta     _game_mode
;
; load_title(); // initial title load
;
	jsr     _load_title
;
; which_bg = 0;
;
	lda     #$00
	sta     _which_bg
;
; player_x = 64;
;
	lda     #$40
	sta     _player_x
;
; player_y = 80;
;
	lda     #$50
	sta     _player_y
;
; pal_bright(4); // back to normal brighness
;
	lda     #$04
	jsr     _pal_bright
;
; while (game_mode == MODE_END)
;
L001D:	lda     _game_mode
	cmp     #$04
	beq     L0016
;
; while (1)
;
	jmp     L001A

.endproc

