;
; File generated by cc65 v 2.18 - N/A
;
	.fopt		compiler,"cc65 v 2.18 - N/A"
	.setcpu		"6502"
	.smart		on
	.autoimport	on
	.case		on
	.debuginfo	off
	.importzp	sp, sreg, regsave, regbank
	.importzp	tmp1, tmp2, tmp3, tmp4, ptr1, ptr2, ptr3, ptr4
	.macpack	longbranch
	.forceimport	__STARTUP__
	.import		_pal_bg
	.import		_pal_spr
	.import		_ppu_wait_nmi
	.import		_ppu_off
	.import		_ppu_on_all
	.import		_pad_trigger
	.import		_pad_state
	.import		_bank_spr
	.import		_set_vram_buffer
	.import		_one_vram_buffer
	.import		_multi_vram_buffer_horz
	.import		_serial_data
	.export		_pad1
	.export		_pad1_new
	.export		_pad2
	.export		_pad2_new
	.export		_controller
	.export		_x
	.export		_y
	.export		_c_map
	.export		_draw_controller
	.export		_bg_pal
	.export		_sp_pal
	.export		_text
	.export		_blank
	.export		_label1
	.export		_label2
	.export		_main

.segment	"RODATA"

_bg_pal:
	.byte	$00
	.byte	$00
	.byte	$10
	.byte	$30
	.byte	$2C
	.byte	$05
	.byte	$37
	.byte	$15
	.byte	$2C
	.byte	$0F
	.byte	$20
	.byte	$11
	.byte	$2C
	.byte	$19
	.byte	$2A
	.byte	$0F
_sp_pal:
	.byte	$0F
	.byte	$0F
	.byte	$0F
	.byte	$28
	.byte	$0F
	.byte	$0F
	.byte	$0F
	.byte	$12
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
_text:
	.byte	$53,$65,$72,$69,$61,$6C,$20,$54,$65,$73,$74,$00
_blank:
	.byte	$20,$20,$20,$20,$20,$20,$20,$20,$00
_label1:
	.byte	$50,$41,$44,$20,$31,$00
_label2:
	.byte	$50,$41,$44,$20,$32,$00

.segment	"BSS"

.segment	"ZEROPAGE"
_pad1:
	.res	1,$00
_pad1_new:
	.res	1,$00
_pad2:
	.res	1,$00
_pad2_new:
	.res	1,$00
_controller:
	.res	1,$00
_x:
	.res	1,$00
_y:
	.res	1,$00
.segment	"BSS"
_c_map:
	.res	240,$00

; ---------------------------------------------------------------
; void __near__ draw_controller (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_draw_controller: near

.segment	"CODE"

;
; if(controller & PAD_RIGHT){
;
	lda     _controller
	and     #$01
	beq     L00D6
;
; one_vram_buffer('R', NTADR_A(x,17));
;
	lda     #$52
	jsr     pusha
	lda     _x
	ora     #$20
	ldx     #$22
	jsr     _one_vram_buffer
;
; ++x;
;
L00D6:	inc     _x
;
; if(controller & PAD_LEFT){
;
	lda     _controller
	and     #$02
	beq     L00D7
;
; one_vram_buffer('L', NTADR_A(x,17));
;
	lda     #$4C
	jsr     pusha
	lda     _x
	ora     #$20
	ldx     #$22
	jsr     _one_vram_buffer
;
; ++x;
;
L00D7:	inc     _x
;
; if(controller & PAD_DOWN){
;
	lda     _controller
	and     #$04
	beq     L00D8
;
; one_vram_buffer('D', NTADR_A(x,17));
;
	lda     #$44
	jsr     pusha
	lda     _x
	ora     #$20
	ldx     #$22
	jsr     _one_vram_buffer
;
; ++x;
;
L00D8:	inc     _x
;
; if(controller & PAD_UP){
;
	lda     _controller
	and     #$08
	beq     L00D9
;
; one_vram_buffer('U', NTADR_A(x,17));
;
	lda     #$55
	jsr     pusha
	lda     _x
	ora     #$20
	ldx     #$22
	jsr     _one_vram_buffer
;
; ++x;
;
L00D9:	inc     _x
;
; if(controller & PAD_START){
;
	lda     _controller
	and     #$10
	beq     L00DA
;
; one_vram_buffer('S', NTADR_A(x,17));
;
	lda     #$53
	jsr     pusha
	lda     _x
	ora     #$20
	ldx     #$22
	jsr     _one_vram_buffer
;
; ++x;
;
L00DA:	inc     _x
;
; if(controller & PAD_SELECT){
;
	lda     _controller
	and     #$20
	beq     L00DB
;
; one_vram_buffer('*', NTADR_A(x,17));
;
	lda     #$2A
	jsr     pusha
	lda     _x
	ora     #$20
	ldx     #$22
	jsr     _one_vram_buffer
;
; ++x;
;
L00DB:	inc     _x
;
; if(controller & PAD_B){
;
	lda     _controller
	and     #$40
	beq     L00DC
;
; one_vram_buffer('B', NTADR_A(x,17));
;
	lda     #$42
	jsr     pusha
	lda     _x
	ora     #$20
	ldx     #$22
	jsr     _one_vram_buffer
;
; ++x;
;
L00DC:	inc     _x
;
; if(controller & PAD_A){
;
	lda     _controller
	and     #$80
	beq     L00CC
;
; one_vram_buffer('A', NTADR_A(x,17));
;
	lda     #$41
	jsr     pusha
	lda     _x
	ora     #$20
	ldx     #$22
	jmp     _one_vram_buffer
;
; }
;
L00CC:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ main (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_main: near

.segment	"CODE"

;
; ppu_off();
;
	jsr     _ppu_off
;
; pal_bg(bg_pal);
;
	lda     #<(_bg_pal)
	ldx     #>(_bg_pal)
	jsr     _pal_bg
;
; pal_spr(sp_pal);
;
	lda     #<(_sp_pal)
	ldx     #>(_sp_pal)
	jsr     _pal_spr
;
; bank_spr(1);
;
	lda     #$01
	jsr     _bank_spr
;
; ppu_wait_nmi(); // wait
;
	jsr     _ppu_wait_nmi
;
; set_vram_buffer(); // points ppu update to vram_buffer, do this at least once
;
	jsr     _set_vram_buffer
;
; multi_vram_buffer_horz(text, sizeof(text), NTADR_A(10,5)); // pushes 12 bytes, horz
;
	jsr     decsp3
	lda     #<(_text)
	ldy     #$01
	sta     (sp),y
	iny
	lda     #>(_text)
	sta     (sp),y
	lda     #$0C
	ldy     #$00
	sta     (sp),y
	ldx     #$20
	lda     #$AA
	jsr     _multi_vram_buffer_horz
;
; multi_vram_buffer_horz(label1, sizeof(label1), NTADR_A(7,15)); // pushes 12 bytes, horz
;
	jsr     decsp3
	lda     #<(_label1)
	ldy     #$01
	sta     (sp),y
	iny
	lda     #>(_label1)
	sta     (sp),y
	lda     #$06
	ldy     #$00
	sta     (sp),y
	ldx     #$21
	lda     #$E7
	jsr     _multi_vram_buffer_horz
;
; multi_vram_buffer_horz(label2, sizeof(label2), NTADR_A(16,15)); // pushes 12 bytes, horz
;
	jsr     decsp3
	lda     #<(_label2)
	ldy     #$01
	sta     (sp),y
	iny
	lda     #>(_label2)
	sta     (sp),y
	lda     #$06
	ldy     #$00
	sta     (sp),y
	ldx     #$21
	lda     #$F0
	jsr     _multi_vram_buffer_horz
;
; ppu_on_all();
;
	jsr     _ppu_on_all
;
; ppu_wait_nmi(); // wait till beginning of the frame
;
L0052:	jsr     _ppu_wait_nmi
;
; pad1_new = pad_trigger(0);
;
	lda     #$00
	jsr     _pad_trigger
	sta     _pad1_new
;
; pad1 = pad_state(0);
;
	lda     #$00
	jsr     _pad_state
	sta     _pad1
;
; pad2 = serial_data(pad1);
;
	jsr     _serial_data
	sta     _pad2
;
; multi_vram_buffer_horz(blank, sizeof(blank), NTADR_A(6,17));
;
	jsr     decsp3
	lda     #<(_blank)
	ldy     #$01
	sta     (sp),y
	iny
	lda     #>(_blank)
	sta     (sp),y
	lda     #$09
	ldy     #$00
	sta     (sp),y
	ldx     #$22
	lda     #$26
	jsr     _multi_vram_buffer_horz
;
; multi_vram_buffer_horz(blank, sizeof(blank), NTADR_A(15,17));
;
	jsr     decsp3
	lda     #<(_blank)
	ldy     #$01
	sta     (sp),y
	iny
	lda     #>(_blank)
	sta     (sp),y
	lda     #$09
	ldy     #$00
	sta     (sp),y
	ldx     #$22
	lda     #$2F
	jsr     _multi_vram_buffer_horz
;
; controller = pad1;
;
	lda     _pad1
	sta     _controller
;
; x = 6;
;
	lda     #$06
	sta     _x
;
; draw_controller();
;
	jsr     _draw_controller
;
; controller = pad2;
;
	lda     _pad2
	sta     _controller
;
; x = 15;
;
	lda     #$0F
	sta     _x
;
; draw_controller();
;
	jsr     _draw_controller
;
; while (1) // game loop
;
	jmp     L0052

.endproc

